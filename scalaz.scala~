import scalaz._
import scalaz.Scalaz._
import scala.collection.immutable.NumericRange

object Scalaz {
  def main(args: Array[String]) {
    println("### Equals")
    1 === 1
    //1 === "1" ;compilation error
    1.some =/= 2.some

    println("### Ordering")
    (1 > 2.0) === false
    //1 gt 2.0 ;compilation error
    (1.0 ?|? 2.0) === LT
    (1.0 max 2.0) == 2.0

    println("### Show")
    3.shows == "3"
    3.println

    println("### Enum")
    ('a' to 'e').toList == ('a' |-> 'e')
    ('b'.succ == 'c') == true

    println("### Typeclass")
    implicit def listCanTruthy[A]: CanTruthy[List[A]] = CanTruthy truthys {
      case Nil => false
      case _ => true
    }
    //List(1).truthy

    println("### Functor")
    (1, 2, 3) map (_ + 1) //tuple
    ((x: Int) => x + 3) map (_ + 3) //function
    val f1 = Functor[List].lift( (_: Int) * 2)
    f1(List(1,2,3)) //6
    val x1 = List(1, 2, 3) >| "x"
    val x2 = List(1, 2, 3) as "x"
    val x3 = List(1, 2, 3) fpair
    val x4 = List(1, 2, 3).strengthL("x")
    val x5 = List(1, 2, 3).strengthR("x")
    val x6 = List(1, 2, 3).void

    println("### Applicative")
    val x7 = List(1, 2, 3) map ((_: Int) * (_: Int)).curried
    val x8 = x7 map (f => f(2))
    val x9 = 1.point[List]
    val x10 = 1.point[Option] map (_ + 2)
    val x11 = 9.some <*> ((_: Int) + 3).some
    val x12 = 1.some <* 2.some
    val x13 = 1.some *> 2.some
    val x14 = none *> 2.some
    val x15 = none <* 2.some
  }
}

/**
 * Typed constructor : How I can convert any value to a boolean
 */
trait CanTruthy[A] { self =>
  def truthys(a: A): Boolean
}

object CanTruthy {
  def apply[A](implicit ev: CanTruthy[A]): CanTruthy[A] = ev
  def truthys[A](f: A => Boolean): CanTruthy[A] = new CanTruthy[A] {
    def truthys(a: A) = f(a)
  }
}

trait CanTruthyOps[A] {
  def self: A
  implicit def F: CanTruthy[A]
  final def truthy: Boolean = F.truthys(self)
}

object ToCanIsTruthyOps {
  implicit def toCanIsTruthyOps[A](v: A)(implicit ev: CanTruthy[A]) = new CanTruthyOps[A] {
    def self = v
    implicit def F: CanTruthy[A] = ev
  }
}
